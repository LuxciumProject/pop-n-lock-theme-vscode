/*



swagger
access
alias
arg
argument
async
attribute
augments
author
beta
borrows
bubbes
callback
chainable
class
classdesc
code
config
const
constant
constructs
copyright
default
defaultvalue
define
deprecated
desc
description
dict
emits
enum
event
example
exports?
extends
extension
extension_for
extensionfor
external
file
fileoverview
final
fires
for
function
global
host
ignore
implements
implicitCast
inherit[Dd]oc
inner
instance
interface
kind
lends
license
listens
main
member
memberof
method
mixex
mixins?
modifies
module
name
namespace
noalias
nocollapse
nocompile
nosideeffects
override
overview
package
param
preserve
prop
property
read[Oo]nly
record
require[ds]
returns?
see
since
struct
submodule
summary
suppress
template
this
? keyword.control.trycatch.ts :
throws
todo
type
typedef
unrestricted
uses
var
variation
version
virtual
writeOnce

storage.modifier.ts
storage.modifier.ts
storage.modifier.ts
storage.modifier.ts
storage.modifier.
storage.modifier.abstract
storage.modifier.private
storage.modifier.protected
storage.modifier.public
storage.modifier.static
storage.type.constructor
storage.type.const
storage.type.let

keyword.control.flow.return
keyword.control.trycatch.catch
keyword.control.trycatch.try
keyword.control.trycatch.throw

support.type.builtin.undefined
support.type.builtin.null

support.type.primitive.string
support.type.primitive.number
support.type.primitive.boolean


(public)
storage.modifier.public.ts
meta.class.ts
source.ts

(public methode)
storage.modifier.public.ts
meta.method.declaration.ts
meta.class.ts
source.ts

(private)
storage.modifier.private.ts
meta.class.ts
source.ts

(private methode)
storage.modifier.private.ts
meta.method.declaration.ts
meta.class.ts
source.ts




    "literal-keywords": {
      "docblock": {
        "patterns": [
          {
            "name": "storage.type.class",
            "match": "(?x)(?<!\\w)@(swagger|abstract|access|alias|arg|argument|async|attribute|augments|author|beta|borrows|bubbes|callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright|default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exports?|extends|extension|extension_for|extensionfor|external|file|fileoverview|final|fires|for|function|global|host|ignore|implements|implicitCast|inherit[Dd]oc|inner|instance|interface|kind|lends|license|listens|main|member|memberof|method|mixex|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects|override|overview|package|param|preserve|private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|suppress|template|this|throws|todo|type|typedef|unrestricted|uses|var|variation|version|virtual|writeOnce)\\b"
          },
          {
            "name": "other.meta.jsdoc",
            "match": "(?x)(\\[[^\\]]+\\](?!{@\\w+\\s+[^\\s|}]+[\\s|][^}]*}))?(?:{(@(?:link|linkcode|linkplain|tutorial))\\s+([^\\s|}]+)(?:[\\s|][^}]*)?})",
            "captures": {
              "0": {
                "name": "entity.name.type.instance.jsdoc"
              },
              "1": {
                "name": "constant.other.description.jsdoc"
              },
              "2": {
                "name": "storage.type.class.jsdoc"
              },
              "3": {
                "name": "variable.other.description.jsdoc"
              }
            }
          },
          {
            "match": "(?x)(?:(?<=@param)|(?<=@arg)|(?<=@argument)|(?<=@type)|(?<=@property)|(?<=@prop))\\s+({(?:\\*|\\?|(?:(?:\\?|!|\\.{3})?(?:(?:function\\s*\\(\\s*(?:[a-zA-Z_$][\\w$]*(?:\\s*,\\s*[a-zA-Z_$][\\w$]*)*)?\\s*\\)(?:\\s*:\\s*[a-zA-Z_$][\\w$]*)?)?|(?:\\([a-zA-Z_$]+(?:(?:[\\w$]*(?:\\[\\])?)|\\.?<[\\w$]+(?:,\\s+[\\w$]+)*>)(?:[\\.|~][a-zA-Z_$]+(?:(?:[\\w$]*(?:\\[\\])?)|\\.?<[\\w$]+(?:,\\s+[\\w$]+)*>))*\\)|[a-zA-Z_$]+(?:(?:[\\w$]*(?:\\[\\])?)|\\.?<[\\w$]+(?:,\\s+[\\w$]+)*>)(?:[\\.|~][a-zA-Z_$]+(?:[\\w$]*|\\.?<[\\w$]+(?:,\\s+[\\w$]+)*>))*))(?:\\[\\])?=?))})\\s+(\\[\\s*(?:[a-zA-Z_$][\\w$]*(?:(?:\\[\\])?\\.[a-zA-Z_$][\\w$]*)*(?:\\s*=\\s*[\\w$\\s]*)?)\\s*\\]|(?:[a-zA-Z_$][\\w$]*(?:(?:\\[\\])?\\.[a-zA-Z_$][\\w$]*)*)?)\\s+(?:-\\s+)?((?:(?!\\*\\/).)*)",
            "captures": {
              "0": {
                "name": "other.meta.jsdoc"
              },
              "1": {
                "name": "entity.name.type.instance.jsdoc"
              },
              "2": {
                "name": "variable.other.jsdoc"
              },
              "3": {
                "name": "other.description.jsdoc"
              }
            }
          },
          {
            "match": "(?x)({(?:\\*|\\?|(?:(?:\\?|!|\\.{3})?(?:(?:function\\s*\\(\\s*(?:[a-zA-Z_$][\\w$]*(?:\\s*,\\s*[a-zA-Z_$][\\w$]*)*)?\\s*\\)(?:\\s*:\\s*[a-zA-Z_$][\\w$]*)?)?|(?:\\([a-zA-Z_$]+(?:[\\w$]*|\\.?<[\\w$]+(?:,\\s+[\\w$]+)*>)(?:[\\.|~][a-zA-Z_$]+(?:[\\w$]*|\\.?<[\\w$]+(?:,\\s+[\\w$]+)*>))*\\)|[a-zA-Z_$]+(?:[\\w$]*|\\.?<[\\w$]+(?:,\\s+[\\w$]+)*>)(?:[\\.|~][a-zA-Z_$]+(?:[\\w$]*|\\.?<[\\w$]+(?:,\\s+[\\w$]+)*>))*))(?:\\[\\])?=?))})\\s+(?:-\\s+)?((?:(?!\\*\\/).)*)",
            "captures": {
              "0": {
                "name": "other.meta.jsdoc"
              },
              "1": {
                "name": "entity.name.type.instance.jsdoc"
              },
              "2": {
                "name": "other.description.jsdoc"
              }
            }
          },
          {
            "match": "^\\s+\\*\\s+(\\-)\\s([^:@\\*\\n]+)$",
            "captures": {
              "1": {
                "name": "keyword.operator.accessor.js"
              },
              "2": {
                "name": "string.unquoted.plain.out.yaml"
              }
            }
          },
          {
            "match": "^\\s+\\*\\s+(\\-?)([^:@\\*\\n]+)(:)([^\\*\\n]*)$",
            "captures": {
              "1": {
                "name": "keyword.operator.accessor.js"
              },
              "2": {
                "name": "entity.name.tag.yaml"
              },
              "3": {
                "name": "keyword.operator.accessor.js"
              },
              "4": {
                "name": "string.unquoted.plain.out.yaml"
              }
            }
          }
        ]
      },
      "literal-keyword-storage": {
        "patterns": [
          {
            "name": "storage.type.js",
            "match": "(?<!\\.)\\b(?>const|let|var)\\b"
          }
        ]
      },
      "literal-keywords": {
        "patterns": [
          {
            "include": "#literal-keyword-storage"
          },
          {
            "match": "(?<!\\.)\\b((?>await|yield))\\b(?:\\s*(\\*))?",
            "captures": {
              "1": { "name": "keyword.control.flow.js" },
              "2": { "name": "keyword.generator.asterisk.js" }
            }
          },
          {
            "name": "keyword.control.flow.js",
            "match": "(?<!\\.)\\b(return)\\b"
          },
          {
            "name": "keyword.control.conditional.js",
            "match": "(?<!\\.)\\b(?>if|else)\\b"
          },
          {
            "name": "keyword.control.trycatch.js",
            "match": "(?<!\\.)\\b(?>catch|finally|throw|try)\\b"
          },
          {
            "name": "keyword.control.loop.js",
            "match": "(?<!\\.)\\b(?>break|continue|do|goto|while|case|default)\\b"
          },
          {
            "name": "keyword.other.reserved.js",
            "match": "(?<!\\.)\\b(?>enum|module|public|package|private|interface|protected)\\b"
          },
          {
            "name": "keyword.other.js",
            "match": "(?<!\\.)\\b(debugger)\\b"
          }
        ]
      },
      "class-method-definition": {
        "patterns": [
          {
            "name": "meta.short-method.flowtype.js",
            "begin": "(@@[_$a-zA-Z][$\\w]*|static|return)(?=\\s*[<(])|(?=\\s*<)",
            "beginCaptures": {
              "1": { "name": "keyword.operator.flowtype.js" }
            },
            "end": "(?=\\s*[;{])",
            "patterns": [
              { "include": "#flowtype-polymorph" },
              { "include": "#function-declaration-parameters" },
              { "include": "#flowtype-annotation" },
              { "include": "#comments" },
              { "include": "#curly-brackets" }
            ]
          },
          {
            "name": "meta.class-method.computed.js",
            "begin": "(?<=[]\"'])\\s*(?=[<(])",
            "end": "(?=\\s*[;{])",
            "patterns": [
              { "include": "#flowtype-polymorph" },
              { "include": "#function-declaration-parameters" },
              { "include": "#flowtype-annotation" },
              { "include": "#comments" },
              { "include": "#curly-brackets" }
            ]
          },
          {
            "name": "meta.class-accessor.js",
            "begin": "((?>get|set)\\s+)(?>((')((?>[^'\\\\]|\\\\.)*)('))|((\")((?>[^\"\\\\]|\\\\.)*)(\"))|(([_$a-zA-Z][$\\w]*|\\d+)))(?=\\s*[<(])",
            "beginCaptures": {
              "1": { "name": "storage.type.js" },
              "2": { "name": "string.quoted.js" },
              "3": { "name": "punctuation.definition.string.begin.js" },
              "4": { "name": "entity.name.function.js" },
              "5": { "name": "punctuation.definition.string.end.js" },
              "6": { "name": "string.quoted.js" },
              "7": { "name": "punctuation.definition.string.begin.js" },
              "8": { "name": "entity.name.function.js" },
              "9": { "name": "punctuation.definition.string.end.js" },
              "10": { "name": "string.unquoted.js" },
              "11": { "name": "entity.name.function.js" }
            },
            "end": "(?=\\s*[;{])",
            "patterns": [
              { "include": "#flowtype-polymorph" },
              { "include": "#function-declaration-parameters" },
              { "include": "#flowtype-annotation" },
              { "include": "#comments" },
              { "include": "#curly-brackets" }
            ]
          },
          {
            "name": "meta.class-method.js",
            "begin": "(?>((')((?>[^'\\\\]|\\\\.)*)('))|((\")((?>[^\"\\\\]|\\\\.)*)(\"))|(([_$a-zA-Z][$\\w]*|\\d+)))(?=\\s*[<(])",
            "beginCaptures": {
              "1": { "name": "string.quoted.js" },
              "2": { "name": "punctuation.definition.string.begin.js" },
              "3": { "name": "entity.name.function.js" },
              "4": { "name": "punctuation.definition.string.end.js" },
              "5": { "name": "string.quoted.js" },
              "6": { "name": "punctuation.definition.string.begin.js" },
              "7": { "name": "entity.name.function.js" },
              "8": { "name": "punctuation.definition.string.end.js" },
              "9": { "name": "string.unquoted.js" },
              "10": { "name": "entity.name.function.js" }
            },
            "end": "(?=\\s*[;{])",
            "patterns": [
              { "include": "#flowtype-polymorph" },
              { "include": "#function-declaration-parameters" },
              { "include": "#flowtype-annotation" },
              { "include": "#comments" },
              { "include": "#curly-brackets" }
            ]
          }
        ]
      },
      "patterns": [
        {
          "include": "#literal-keyword-storage"
        },
        {
          "match": "(?<!\\.)\\b((?>await|yield))\\b(?:\\s*(\\*))?",
          "captures": {
            "1": { "name": "keyword.control.flow.js" },
            "2": { "name": "keyword.generator.asterisk.js" }
          }
        },
        {
          "name": "keyword.control.flow.js",
          "match": "(?<!\\.)\\b(return)\\b"
        },
        {
          "name": "keyword.control.conditional.js",
          "match": "(?<!\\.)\\b(?>if|else)\\b"
        },
        {
          "name": "keyword.control.trycatch.js",
          "match": "(?<!\\.)\\b(?>catch|finally|throw|try)\\b"
        },
        {
          "name": "keyword.control.loop.js",
          "match": "(?<!\\.)\\b(?>break|continue|do|goto|while|case|default)\\b"
        },
        {
          "name": "keyword.other.reserved.js",
          "match": "(?<!\\.)\\b(?>enum|module|public|package|private|interface|protected)\\b"
        },
        {
          "name": "keyword.other.js",
          "match": "(?<!\\.)\\b(debugger)\\b"
        }
      ]
    }
source.ts
    "include": "#randomtoexplore.ts"



    "languages": [
      {
        "id": "javascript",
        "aliases": [
          "JavaScript (Luxcium)"
        ],
        "extensions": [
          ".js",
          ".esx"
        ],
        "configuration": "./src/languages/language-configuration.js.json"
      },
      {
        "id": "javascriptreact",
        "aliases": [
          "JavaScript React (Luxcium)"
        ],
        "extensions": [
          ".jsx",
          ".esx"
        ],
        "configuration": "./src/languages/language-configuration.jsx.json"
      },
      {
        "id": "typescript",
        "aliases": [
          "TypeScript (Luxcium)"
        ],
        "extensions": [
          ".ts"
        ],
        "configuration": "./src/languages/language-configuration.ts.json"
      },
      {
        "id": "typescriptreact",
        "aliases": [
          "TypeScript React (Luxcium)"
        ],
        "extensions": [
          ".tsx"
        ],
        "configuration": "./src/languages/language-configuration.tsx.json"
      }
    ],

 "grammars": [
      {
        "language": "TypeScript (Luxcium)",
        "scopeName": "source.ts",
        "injectTo": [
          "source.ts"
        ],
        "path": ".src/syntax/luxcium-typescript.tmGrammar.json"
      }
    ]
*/
